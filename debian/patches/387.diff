--- a/libexec/bats-core/bats
+++ b/libexec/bats-core/bats
@@ -64,6 +64,7 @@ expand_path() {
 }
 
 BATS_LIBEXEC="$(dirname "$(bats_readlinkf "${BASH_SOURCE[0]}")")"
+export BATS_LIBEXEC
 export BATS_CWD="$PWD"
 export BATS_TEST_PATTERN="^[[:blank:]]*@test[[:blank:]]+(.*[^[:blank:]])[[:blank:]]+\{(.*)\$"
 export BATS_TEST_FILTER=
--- a/libexec/bats-core/bats-exec-file
+++ b/libexec/bats-core/bats-exec-file
@@ -167,7 +167,7 @@ bats_run_tests() {
         # use --results to gather output in separate files
         # use --fg mode to retrieve exit codes (all non zero exit codes seem to mapped to 1), but which requires us to suppress its output
         # shellcheck disable=SC2154 #bats_parallel_args is inherited from exec-suite
-        parallel --semaphore -j "$num_jobs" "${bats_parallel_args[@]}" --fg -- bats-exec-test "${flags[@]}" "$filename" "$test_name" "$test_number" >"$test_output_dir/stdout" 2>"$test_output_dir/stderr" &
+        parallel --semaphore -j "$num_jobs" "${bats_parallel_args[@]}" --fg -- $BATS_LIBEXEC/bats-exec-test "${flags[@]}" "$filename" "$test_name" "$test_number" >"$test_output_dir/stdout" 2>"$test_output_dir/stderr" &
         pid=$!
         test_pids_and_numbers+=("$pid,$test_number")
       fi
@@ -189,9 +189,9 @@ bats_run_tests() {
       if [[ $test_name ]]; then
         ((++test_number))
         if [[ "${#flags[@]}" -gt 0 ]]; then
-          bats-exec-test "${flags[@]}" "$filename" "$test_name" "$test_number" || status=1
+          $BATS_LIBEXEC/bats-exec-test "${flags[@]}" "$filename" "$test_name" "$test_number" || status=1
         else
-          bats-exec-test "$filename" "$test_name" "$test_number" || status=1
+          $BATS_LIBEXEC/bats-exec-test "$filename" "$test_name" "$test_number" || status=1
         fi
       fi
     done
--- a/test/bats.bats
+++ b/test/bats.bats
@@ -576,3 +576,9 @@ END_OF_ERR_MSG
   run bash -c "echo $'1..1\nok 1' | bats_test_count_validator"
   [[ $status -eq 0 ]]
 }
+
+@test "test works even if PATH is reset" {
+  run bats "$FIXTURE_ROOT/update_path_env.bats"
+  [ "$status" -eq 1 ]
+  [ "${lines[4]}" = "# /usr/local/bin:/usr/bin:/bin" ]
+}
--- /dev/null
+++ b/test/fixtures/bats/update_path_env.bats
@@ -0,0 +1,6 @@
+PATH="/usr/local/bin:/usr/bin:/bin"
+
+@test "PATH is reset" {
+  echo "$PATH"
+  false
+}
